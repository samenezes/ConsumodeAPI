
import React, { useEffect, useState } from 'react';
import { View, Text, Button } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const App = () => {
  const [storedValue, setStoredValue] = useState(null);

  // Função para armazenar dados
  const storeData = async () => {
    try {
      await AsyncStorage.setItem('@storage_key', 'Hello, AsyncStorage!');
      console.log('Dados armazenados com sucesso!');
    } catch (e) {
      console.error('Erro ao armazenar os dados', e);
    }
  };

  // Função para recuperar dados
  const getData = async () => {
    try {
      const value = await AsyncStorage.getItem('@storage_key');
      if (value !== null) {
        setStoredValue(value);
        console.log('Dados recuperados:', value);
      }
    } catch (e) {
      console.error('Erro ao recuperar os dados', e);
    }
  };

  useEffect(() => {
    // Recupera dados quando o aplicativo for iniciado
    getData();
  }, []);

  return (
    <View style={{ padding: 20 }}>
      <Text>{storedValue ? `Valor armazenado: ${storedValue}` : 'Nenhum valor armazenado'}</Text>
      <Button title="Armazenar Dados" onPress={storeData} />
    </View>
  );
};

export default App;
Explicação do código:
AsyncStorage.setItem(): Esta função é usada para armazenar dados. Ela recebe dois parâmetros: a chave (@storage_key) e o valor (dados que você deseja armazenar). O valor é armazenado como uma string.
AsyncStorage.getItem(): Essa função é usada para recuperar os dados armazenados. Ela recebe a chave como parâmetro e retorna o valor armazenado.
useEffect: O hook useEffect é utilizado para recuperar os dados assim que o aplicativo for iniciado.
